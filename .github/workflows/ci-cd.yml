# .github/workflows/ci-cd.yml
name: Go Auth API CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/go-auth-api
  GO_VERSION: "1.24"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: go_backend_db_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DB_HOST: localhost
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: go_backend_db_test
      DB_PORT: 5432
      SERVER_PORT: 8080
      JWT_SECRET: test-secret-key-for-ci

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: go.sum

      - name: Install dependencies
        run: go mod download

      - name: Generate mocks
        run: |
          go install go.uber.org/mock/mockgen@v0.5.0
          export PATH=$PATH:$(go env GOPATH)/bin
          go generate ./...

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.59.1
          args: --timeout=5m --out-format=colored-line-number

      - name: Run tests
        run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    env:
      DOCKER_BUILDKIT: 1

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Go Auth API
            org.opencontainers.image.description=Go authentication API with JWT
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true
          build-args: |
            GO_VERSION=${{ env.GO_VERSION }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            COMMIT_SHA=${{ github.sha }}

  update-manifests:
    needs: build-and-push
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      GITOPS_REPO: ${{ github.repository_owner }}/go-auth-k8s-manifests
      GITOPS_BRANCH: main

    steps:
      - name: Checkout GitOps repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.GITOPS_REPO }}
          token: ${{ secrets.GITOPS_TOKEN }}
          path: gitops
          ref: ${{ env.GITOPS_BRANCH }}

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Update manifests with image digest
        run: |
          cd gitops
          set -euo pipefail

          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          DIGEST="${{ needs.build-and-push.outputs.image-digest }}"

          echo "Image: $IMAGE"
          echo "Digest: $DIGEST"

          if [ -z "$DIGEST" ]; then
            echo "Image digest is empty; aborting."
            exit 1
          fi

          FILE="overlays/production/kustomization.yaml"

          # Ensure images array exists
          if ! yq -e '.images' "$FILE" >/dev/null 2>&1; then
            yq -i '.images = []' "$FILE"
          fi

          # Update existing image entry or append a new one with digest
          if yq -e ".images[] | select(.name == strenv(IMAGE))" "$FILE" >/dev/null 2>&1; then
            yq -i "( .images[] | select(.name == strenv(IMAGE)) ).digest = strenv(DIGEST)" "$FILE"
          else
            yq -i '.images += [{"name": strenv(IMAGE), "digest": strenv(DIGEST)}]' "$FILE"
          fi

          echo "=== Updated kustomization.yaml ==="
          cat "$FILE"

          # Check if there are changes to commit
          if git diff --quiet; then
            echo "No changes detected in manifests"
            exit 0
          fi

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          echo "=== Changes detected ==="
          git diff

          # Commit and push changes
          git add "$FILE"
          git commit -m "chore(gitops): update go-auth-api image digest

          Source commit: ${{ github.sha }}
          Image: $IMAGE@$DIGEST"
          git push
