# .github/workflows/ci-cd.yml
name: Go Auth API CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/go-auth-api
  GO_VERSION: "1.22"

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: go_backend_db_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DB_HOST: localhost
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: go_backend_db_test
      DB_PORT: 5432
      SERVER_PORT: 8080
      JWT_SECRET: test-secret-key-for-ci

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: go.sum

      - name: Install dependencies
        run: go mod download

      - name: Generate mocks
        run: |
          go install go.uber.org/mock/mockgen@latest
          export PATH=$PATH:$(go env GOPATH)/bin
          go generate ./...

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m

      - name: Run tests
        run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    env:
      DOCKER_BUILDKIT: 1

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=main-{{date 'YYYYMMDD'}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Go Auth API
            org.opencontainers.image.description=Go authentication API with JWT
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GO_VERSION=${{ env.GO_VERSION }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            COMMIT_SHA=${{ github.sha }}

  update-manifests:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      GITOPS_REPO: ${{ github.repository_owner }}/go-auth-k8s-manifests
      GITOPS_BRANCH: main

    steps:
      - name: Checkout GitOps repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.GITOPS_REPO }}
          token: ${{ secrets.GITOPS_TOKEN }}
          path: gitops
          ref: ${{ env.GITOPS_BRANCH }}

      - name: Update image tag
        run: |
          cd gitops
          NEW_TAG=$(echo "${{ needs.build-and-push.outputs.image-tag }}" | head -n1)
          echo "Updating image to: ${NEW_TAG}"

          # Update kustomization.yaml
          sed -i "s|newTag:.*|newTag: ${NEW_TAG##*:}|g" overlays/production/kustomization.yaml

          # Commit and push changes
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "Update go-auth-api image to ${NEW_TAG}" || exit 0
          git push
